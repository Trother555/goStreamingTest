// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.0
// source: docs/docs.proto

package docs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocsClient is the client API for Docs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocsClient interface {
	// sending stream with most fields empty
	SendDocFull(ctx context.Context, opts ...grpc.CallOption) (Docs_SendDocFullClient, error)
	SendDocVariadic(ctx context.Context, opts ...grpc.CallOption) (Docs_SendDocVariadicClient, error)
}

type docsClient struct {
	cc grpc.ClientConnInterface
}

func NewDocsClient(cc grpc.ClientConnInterface) DocsClient {
	return &docsClient{cc}
}

func (c *docsClient) SendDocFull(ctx context.Context, opts ...grpc.CallOption) (Docs_SendDocFullClient, error) {
	stream, err := c.cc.NewStream(ctx, &Docs_ServiceDesc.Streams[0], "/docs.Docs/SendDocFull", opts...)
	if err != nil {
		return nil, err
	}
	x := &docsSendDocFullClient{stream}
	return x, nil
}

type Docs_SendDocFullClient interface {
	Send(*DocStreamRequest) error
	CloseAndRecv() (*SendDocResponse, error)
	grpc.ClientStream
}

type docsSendDocFullClient struct {
	grpc.ClientStream
}

func (x *docsSendDocFullClient) Send(m *DocStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *docsSendDocFullClient) CloseAndRecv() (*SendDocResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendDocResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *docsClient) SendDocVariadic(ctx context.Context, opts ...grpc.CallOption) (Docs_SendDocVariadicClient, error) {
	stream, err := c.cc.NewStream(ctx, &Docs_ServiceDesc.Streams[1], "/docs.Docs/SendDocVariadic", opts...)
	if err != nil {
		return nil, err
	}
	x := &docsSendDocVariadicClient{stream}
	return x, nil
}

type Docs_SendDocVariadicClient interface {
	Send(*DocOrRowRequest) error
	CloseAndRecv() (*SendDocResponse, error)
	grpc.ClientStream
}

type docsSendDocVariadicClient struct {
	grpc.ClientStream
}

func (x *docsSendDocVariadicClient) Send(m *DocOrRowRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *docsSendDocVariadicClient) CloseAndRecv() (*SendDocResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendDocResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DocsServer is the server API for Docs service.
// All implementations must embed UnimplementedDocsServer
// for forward compatibility
type DocsServer interface {
	// sending stream with most fields empty
	SendDocFull(Docs_SendDocFullServer) error
	SendDocVariadic(Docs_SendDocVariadicServer) error
	mustEmbedUnimplementedDocsServer()
}

// UnimplementedDocsServer must be embedded to have forward compatible implementations.
type UnimplementedDocsServer struct {
}

func (UnimplementedDocsServer) SendDocFull(Docs_SendDocFullServer) error {
	return status.Errorf(codes.Unimplemented, "method SendDocFull not implemented")
}
func (UnimplementedDocsServer) SendDocVariadic(Docs_SendDocVariadicServer) error {
	return status.Errorf(codes.Unimplemented, "method SendDocVariadic not implemented")
}
func (UnimplementedDocsServer) mustEmbedUnimplementedDocsServer() {}

// UnsafeDocsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocsServer will
// result in compilation errors.
type UnsafeDocsServer interface {
	mustEmbedUnimplementedDocsServer()
}

func RegisterDocsServer(s grpc.ServiceRegistrar, srv DocsServer) {
	s.RegisterService(&Docs_ServiceDesc, srv)
}

func _Docs_SendDocFull_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocsServer).SendDocFull(&docsSendDocFullServer{stream})
}

type Docs_SendDocFullServer interface {
	SendAndClose(*SendDocResponse) error
	Recv() (*DocStreamRequest, error)
	grpc.ServerStream
}

type docsSendDocFullServer struct {
	grpc.ServerStream
}

func (x *docsSendDocFullServer) SendAndClose(m *SendDocResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *docsSendDocFullServer) Recv() (*DocStreamRequest, error) {
	m := new(DocStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Docs_SendDocVariadic_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocsServer).SendDocVariadic(&docsSendDocVariadicServer{stream})
}

type Docs_SendDocVariadicServer interface {
	SendAndClose(*SendDocResponse) error
	Recv() (*DocOrRowRequest, error)
	grpc.ServerStream
}

type docsSendDocVariadicServer struct {
	grpc.ServerStream
}

func (x *docsSendDocVariadicServer) SendAndClose(m *SendDocResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *docsSendDocVariadicServer) Recv() (*DocOrRowRequest, error) {
	m := new(DocOrRowRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Docs_ServiceDesc is the grpc.ServiceDesc for Docs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Docs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "docs.Docs",
	HandlerType: (*DocsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendDocFull",
			Handler:       _Docs_SendDocFull_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendDocVariadic",
			Handler:       _Docs_SendDocVariadic_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "docs/docs.proto",
}
